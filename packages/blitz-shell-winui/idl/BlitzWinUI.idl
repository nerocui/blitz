namespace BlitzWinUI
{
    // Callback interface implemented by the host app (C#) to attach a swapchain to its SwapChainPanel.
    // Rust will create the IDXGISwapChain1 and call back into C# with the raw pointer.
    [uuid(36f88d95-0e3c-4e2a-a276-8a7a3b138b91)]
    interface ISwapChainAttacher
    {
        void AttachSwapChain(UInt64 swapchainPtr);
        Boolean TestAttacherConnection();
    }

    /// ABI exposed to C#
    runtimeclass Host
    {
        // Pass an object that implements BlitzWinUI.ISwapChainAttacher.
        // The component will create a DXGI swapchain and invoke AttachSwapChain so C# can set it on the panel.
        Host(Object attacher, UInt32 width, UInt32 height, Single scale);
        void SetPanel(Object attacher);
        void Resize(UInt32 width, UInt32 height, Single scale);
        void RenderOnce();
        void LoadHtml(String html);
    void SetVerboseLogging(Boolean enabled);
        Boolean TestAttacherConnection(); // Add test method
    void WheelScroll(Double dx, Double dy); // mouse wheel / trackpad scroll delta
    void PointerMove(Single x, Single y, UInt32 buttons, UInt32 modifiers);
    void PointerDown(Single x, Single y, UInt8 button, UInt32 buttons, UInt32 modifiers);
    void PointerUp(Single x, Single y, UInt8 button, UInt32 buttons, UInt32 modifiers);
    }
}
