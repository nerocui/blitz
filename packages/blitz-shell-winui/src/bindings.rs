// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Host(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Host, windows_core::IUnknown, windows_core::IInspectable);
impl Host {
    pub fn SetPanel<P0>(&self, attacher: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPanel)(
                windows_core::Interface::as_raw(this),
                attacher.param().abi(),
            )
            .ok()
        }
    }
    pub fn Resize(&self, width: u32, height: u32, scale: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resize)(
                windows_core::Interface::as_raw(this),
                width,
                height,
                scale,
            )
            .ok()
        }
    }
    pub fn RenderOnce(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RenderOnce)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn LoadHtml(&self, html: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).LoadHtml)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(html),
            )
            .ok()
        }
    }
    pub fn SetVerboseLogging(&self, enabled: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetVerboseLogging)(
                windows_core::Interface::as_raw(this),
                enabled,
            )
            .ok()
        }
    }
    pub fn SetDebugOverlay(&self, enabled: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetDebugOverlay)(
                windows_core::Interface::as_raw(this),
                enabled,
            )
            .ok()
        }
    }
    pub fn SetNetworkFetcher<P0>(&self, fetcher: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetNetworkFetcher)(
                windows_core::Interface::as_raw(this),
                fetcher.param().abi(),
            )
            .ok()
        }
    }
    pub fn CompleteFetch(
        &self,
        requestid: u32,
        docid: u32,
        success: bool,
        data: &[u8],
        errormessage: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).CompleteFetch)(
                windows_core::Interface::as_raw(this),
                requestid,
                docid,
                success,
                data.len().try_into().unwrap(),
                data.as_ptr(),
                core::mem::transmute_copy(errormessage),
            )
            .ok()
        }
    }
    pub fn RequestUrl(
        &self,
        docid: u32,
        url: &windows_core::HSTRING,
        requestid: u32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RequestUrl)(
                windows_core::Interface::as_raw(this),
                docid,
                core::mem::transmute_copy(url),
                requestid,
            )
            .ok()
        }
    }
    pub fn TestAttacherConnection(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TestAttacherConnection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
    pub fn WheelScroll(&self, dx: f64, dy: f64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).WheelScroll)(
                windows_core::Interface::as_raw(this),
                dx,
                dy,
            )
            .ok()
        }
    }
    pub fn PointerMove(
        &self,
        x: f32,
        y: f32,
        buttons: u32,
        modifiers: u32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PointerMove)(
                windows_core::Interface::as_raw(this),
                x,
                y,
                buttons,
                modifiers,
            )
            .ok()
        }
    }
    pub fn PointerDown(
        &self,
        x: f32,
        y: f32,
        button: u8,
        buttons: u32,
        modifiers: u32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PointerDown)(
                windows_core::Interface::as_raw(this),
                x,
                y,
                button,
                buttons,
                modifiers,
            )
            .ok()
        }
    }
    pub fn PointerUp(
        &self,
        x: f32,
        y: f32,
        button: u8,
        buttons: u32,
        modifiers: u32,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).PointerUp)(
                windows_core::Interface::as_raw(this),
                x,
                y,
                button,
                buttons,
                modifiers,
            )
            .ok()
        }
    }
    pub fn ReportAttachSubPhase(&self, kind: u8, ms: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).ReportAttachSubPhase)(
                windows_core::Interface::as_raw(this),
                kind,
                ms,
            )
            .ok()
        }
    }
    pub fn CreateInstance<P0>(
        attacher: P0,
        width: u32,
        height: u32,
        scale: f32,
        initialhtml: &windows_core::HSTRING,
    ) -> windows_core::Result<Host>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        Self::IHostFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                attacher.param().abi(),
                width,
                height,
                scale,
                core::mem::transmute_copy(initialhtml),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IHostFactory<R, F: FnOnce(&IHostFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Host, IHostFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Host {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IHost>();
}
unsafe impl windows_core::Interface for Host {
    type Vtable = <IHost as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IHost as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Host {
    const NAME: &'static str = "BlitzWinUI.Host";
}
unsafe impl Send for Host {}
unsafe impl Sync for Host {}
windows_core::imp::define_interface!(IHost, IHost_Vtbl, 0xaa6fb944_a0b6_5aa2_b960_b8fbdb2394c9);
impl windows_core::RuntimeType for IHost {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IHost {
    const NAME: &'static str = "BlitzWinUI.IHost";
}
pub trait IHost_Impl: windows_core::IUnknownImpl {
    fn SetPanel(
        &self,
        attacher: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn Resize(&self, width: u32, height: u32, scale: f32) -> windows_core::Result<()>;
    fn RenderOnce(&self) -> windows_core::Result<()>;
    fn LoadHtml(&self, html: &windows_core::HSTRING) -> windows_core::Result<()>;
    fn SetVerboseLogging(&self, enabled: bool) -> windows_core::Result<()>;
    fn SetDebugOverlay(&self, enabled: bool) -> windows_core::Result<()>;
    fn SetNetworkFetcher(
        &self,
        fetcher: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn CompleteFetch(
        &self,
        requestId: u32,
        docId: u32,
        success: bool,
        data: &[u8],
        errorMessage: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
    fn RequestUrl(
        &self,
        docId: u32,
        url: &windows_core::HSTRING,
        requestId: u32,
    ) -> windows_core::Result<()>;
    fn TestAttacherConnection(&self) -> windows_core::Result<bool>;
    fn WheelScroll(&self, dx: f64, dy: f64) -> windows_core::Result<()>;
    fn PointerMove(&self, x: f32, y: f32, buttons: u32, modifiers: u32)
        -> windows_core::Result<()>;
    fn PointerDown(
        &self,
        x: f32,
        y: f32,
        button: u8,
        buttons: u32,
        modifiers: u32,
    ) -> windows_core::Result<()>;
    fn PointerUp(
        &self,
        x: f32,
        y: f32,
        button: u8,
        buttons: u32,
        modifiers: u32,
    ) -> windows_core::Result<()>;
    fn ReportAttachSubPhase(&self, kind: u8, ms: f32) -> windows_core::Result<()>;
}
impl IHost_Vtbl {
    pub const fn new<Identity: IHost_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetPanel<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            attacher: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::SetPanel(this, core::mem::transmute_copy(&attacher)).into()
            }
        }
        unsafe extern "system" fn Resize<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            width: u32,
            height: u32,
            scale: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::Resize(this, width, height, scale).into()
            }
        }
        unsafe extern "system" fn RenderOnce<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::RenderOnce(this).into()
            }
        }
        unsafe extern "system" fn LoadHtml<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            html: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::LoadHtml(this, core::mem::transmute(&html)).into()
            }
        }
        unsafe extern "system" fn SetVerboseLogging<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            enabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::SetVerboseLogging(this, enabled).into()
            }
        }
        unsafe extern "system" fn SetDebugOverlay<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            enabled: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::SetDebugOverlay(this, enabled).into()
            }
        }
        unsafe extern "system" fn SetNetworkFetcher<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            fetcher: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::SetNetworkFetcher(this, core::mem::transmute_copy(&fetcher)).into()
            }
        }
        unsafe extern "system" fn CompleteFetch<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            requestid: u32,
            docid: u32,
            success: bool,
            data_array_size: u32,
            data: *const u8,
            errormessage: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::CompleteFetch(
                    this,
                    requestid,
                    docid,
                    success,
                    core::slice::from_raw_parts(
                        core::mem::transmute_copy(&data),
                        data_array_size as usize,
                    ),
                    core::mem::transmute(&errormessage),
                )
                .into()
            }
        }
        unsafe extern "system" fn RequestUrl<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            docid: u32,
            url: *mut core::ffi::c_void,
            requestid: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::RequestUrl(this, docid, core::mem::transmute(&url), requestid).into()
            }
        }
        unsafe extern "system" fn TestAttacherConnection<
            Identity: IHost_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHost_Impl::TestAttacherConnection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        unsafe extern "system" fn WheelScroll<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            dx: f64,
            dy: f64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::WheelScroll(this, dx, dy).into()
            }
        }
        unsafe extern "system" fn PointerMove<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            x: f32,
            y: f32,
            buttons: u32,
            modifiers: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::PointerMove(this, x, y, buttons, modifiers).into()
            }
        }
        unsafe extern "system" fn PointerDown<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            x: f32,
            y: f32,
            button: u8,
            buttons: u32,
            modifiers: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::PointerDown(this, x, y, button, buttons, modifiers).into()
            }
        }
        unsafe extern "system" fn PointerUp<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            x: f32,
            y: f32,
            button: u8,
            buttons: u32,
            modifiers: u32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::PointerUp(this, x, y, button, buttons, modifiers).into()
            }
        }
        unsafe extern "system" fn ReportAttachSubPhase<
            Identity: IHost_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            kind: u8,
            ms: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::ReportAttachSubPhase(this, kind, ms).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IHost, OFFSET>(),
            SetPanel: SetPanel::<Identity, OFFSET>,
            Resize: Resize::<Identity, OFFSET>,
            RenderOnce: RenderOnce::<Identity, OFFSET>,
            LoadHtml: LoadHtml::<Identity, OFFSET>,
            SetVerboseLogging: SetVerboseLogging::<Identity, OFFSET>,
            SetDebugOverlay: SetDebugOverlay::<Identity, OFFSET>,
            SetNetworkFetcher: SetNetworkFetcher::<Identity, OFFSET>,
            CompleteFetch: CompleteFetch::<Identity, OFFSET>,
            RequestUrl: RequestUrl::<Identity, OFFSET>,
            TestAttacherConnection: TestAttacherConnection::<Identity, OFFSET>,
            WheelScroll: WheelScroll::<Identity, OFFSET>,
            PointerMove: PointerMove::<Identity, OFFSET>,
            PointerDown: PointerDown::<Identity, OFFSET>,
            PointerUp: PointerUp::<Identity, OFFSET>,
            ReportAttachSubPhase: ReportAttachSubPhase::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHost as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHost_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetPanel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Resize:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32, u32, f32) -> windows_core::HRESULT,
    pub RenderOnce: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub LoadHtml: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub SetVerboseLogging:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub SetDebugOverlay:
        unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
    pub SetNetworkFetcher: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub CompleteFetch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        bool,
        u32,
        *const u8,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub RequestUrl: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        *mut core::ffi::c_void,
        u32,
    ) -> windows_core::HRESULT,
    pub TestAttacherConnection:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
    pub WheelScroll:
        unsafe extern "system" fn(*mut core::ffi::c_void, f64, f64) -> windows_core::HRESULT,
    pub PointerMove: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        u32,
        u32,
    ) -> windows_core::HRESULT,
    pub PointerDown: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        u8,
        u32,
        u32,
    ) -> windows_core::HRESULT,
    pub PointerUp: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        f32,
        f32,
        u8,
        u32,
        u32,
    ) -> windows_core::HRESULT,
    pub ReportAttachSubPhase:
        unsafe extern "system" fn(*mut core::ffi::c_void, u8, f32) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IHostFactory,
    IHostFactory_Vtbl,
    0x4160f2b5_f08f_53d3_b492_72df4a617a69
);
impl windows_core::RuntimeType for IHostFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IHostFactory {
    const NAME: &'static str = "BlitzWinUI.IHostFactory";
}
pub trait IHostFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        attacher: windows_core::Ref<'_, windows_core::IInspectable>,
        width: u32,
        height: u32,
        scale: f32,
        initialHtml: &windows_core::HSTRING,
    ) -> windows_core::Result<Host>;
}
impl IHostFactory_Vtbl {
    pub const fn new<Identity: IHostFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IHostFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            attacher: *mut core::ffi::c_void,
            width: u32,
            height: u32,
            scale: f32,
            initialhtml: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHostFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&attacher),
                    width,
                    height,
                    scale,
                    core::mem::transmute(&initialhtml),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IHostFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHostFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHostFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        u32,
        f32,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    INetworkFetcher,
    INetworkFetcher_Vtbl,
    0x5b9cb9f2_9f3f_4f1a_9c2a_cd1d7e6d9b11
);
impl windows_core::RuntimeType for INetworkFetcher {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    INetworkFetcher,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl INetworkFetcher {
    pub fn Fetch(
        &self,
        requestid: u32,
        docid: u32,
        url: &windows_core::HSTRING,
        method: &windows_core::HSTRING,
    ) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Fetch)(
                windows_core::Interface::as_raw(this),
                requestid,
                docid,
                core::mem::transmute_copy(url),
                core::mem::transmute_copy(method),
            )
            .ok()
        }
    }
}
impl windows_core::RuntimeName for INetworkFetcher {
    const NAME: &'static str = "BlitzWinUI.INetworkFetcher";
}
pub trait INetworkFetcher_Impl: windows_core::IUnknownImpl {
    fn Fetch(
        &self,
        requestId: u32,
        docId: u32,
        url: &windows_core::HSTRING,
        method: &windows_core::HSTRING,
    ) -> windows_core::Result<()>;
}
impl INetworkFetcher_Vtbl {
    pub const fn new<Identity: INetworkFetcher_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn Fetch<Identity: INetworkFetcher_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            requestid: u32,
            docid: u32,
            url: *mut core::ffi::c_void,
            method: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                INetworkFetcher_Impl::Fetch(
                    this,
                    requestid,
                    docid,
                    core::mem::transmute(&url),
                    core::mem::transmute(&method),
                )
                .into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, INetworkFetcher, OFFSET>(),
            Fetch: Fetch::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<INetworkFetcher as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct INetworkFetcher_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub Fetch: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u32,
        u32,
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    ISwapChainAttacher,
    ISwapChainAttacher_Vtbl,
    0x36f88d95_0e3c_4e2a_a276_8a7a3b138b91
);
impl windows_core::RuntimeType for ISwapChainAttacher {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
windows_core::imp::interface_hierarchy!(
    ISwapChainAttacher,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl ISwapChainAttacher {
    pub fn AttachSwapChain(&self, swapchainptr: u64) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).AttachSwapChain)(
                windows_core::Interface::as_raw(this),
                swapchainptr,
            )
            .ok()
        }
    }
    pub fn TestAttacherConnection(&self) -> windows_core::Result<bool> {
        let this = self;
        unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).TestAttacherConnection)(
                windows_core::Interface::as_raw(this),
                &mut result__,
            )
            .map(|| result__)
        }
    }
}
impl windows_core::RuntimeName for ISwapChainAttacher {
    const NAME: &'static str = "BlitzWinUI.ISwapChainAttacher";
}
pub trait ISwapChainAttacher_Impl: windows_core::IUnknownImpl {
    fn AttachSwapChain(&self, swapchainPtr: u64) -> windows_core::Result<()>;
    fn TestAttacherConnection(&self) -> windows_core::Result<bool>;
}
impl ISwapChainAttacher_Vtbl {
    pub const fn new<Identity: ISwapChainAttacher_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn AttachSwapChain<
            Identity: ISwapChainAttacher_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            swapchainptr: u64,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                ISwapChainAttacher_Impl::AttachSwapChain(this, swapchainptr).into()
            }
        }
        unsafe extern "system" fn TestAttacherConnection<
            Identity: ISwapChainAttacher_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            result__: *mut bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match ISwapChainAttacher_Impl::TestAttacherConnection(this) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, ISwapChainAttacher, OFFSET>(),
            AttachSwapChain: AttachSwapChain::<Identity, OFFSET>,
            TestAttacherConnection: TestAttacherConnection::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<ISwapChainAttacher as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct ISwapChainAttacher_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub AttachSwapChain:
        unsafe extern "system" fn(*mut core::ffi::c_void, u64) -> windows_core::HRESULT,
    pub TestAttacherConnection:
        unsafe extern "system" fn(*mut core::ffi::c_void, *mut bool) -> windows_core::HRESULT,
}
