// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct Host(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(Host, windows_core::IUnknown, windows_core::IInspectable);
impl Host {
    pub fn SetPanel<P0>(&self, panel: P0) -> windows_core::Result<()>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetPanel)(
                windows_core::Interface::as_raw(this),
                panel.param().abi(),
            )
            .ok()
        }
    }
    pub fn Resize(&self, width: u32, height: u32, scale: f32) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).Resize)(
                windows_core::Interface::as_raw(this),
                width,
                height,
                scale,
            )
            .ok()
        }
    }
    pub fn RenderOnce(&self) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).RenderOnce)(windows_core::Interface::as_raw(
                this,
            ))
            .ok()
        }
    }
    pub fn LoadHtml(&self, html: &windows_core::HSTRING) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).LoadHtml)(
                windows_core::Interface::as_raw(this),
                core::mem::transmute_copy(html),
            )
            .ok()
        }
    }
    pub fn CreateInstance<P0>(
        panel: P0,
        width: u32,
        height: u32,
        scale: f32,
    ) -> windows_core::Result<Host>
    where
        P0: windows_core::Param<windows_core::IInspectable>,
    {
        Self::IHostFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                panel.param().abi(),
                width,
                height,
                scale,
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IHostFactory<R, F: FnOnce(&IHostFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<Host, IHostFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for Host {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IHost>();
}
unsafe impl windows_core::Interface for Host {
    type Vtable = <IHost as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IHost as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for Host {
    const NAME: &'static str = "Blitz.WinUI.Host";
}
unsafe impl Send for Host {}
unsafe impl Sync for Host {}
windows_core::imp::define_interface!(IHost, IHost_Vtbl, 0x6c1c1d48_158a_540b_be6a_850e1384ade6);
impl windows_core::RuntimeType for IHost {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IHost {
    const NAME: &'static str = "Blitz.WinUI.IHost";
}
pub trait IHost_Impl: windows_core::IUnknownImpl {
    fn SetPanel(
        &self,
        panel: windows_core::Ref<'_, windows_core::IInspectable>,
    ) -> windows_core::Result<()>;
    fn Resize(&self, width: u32, height: u32, scale: f32) -> windows_core::Result<()>;
    fn RenderOnce(&self) -> windows_core::Result<()>;
    fn LoadHtml(&self, html: &windows_core::HSTRING) -> windows_core::Result<()>;
}
impl IHost_Vtbl {
    pub const fn new<Identity: IHost_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetPanel<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            panel: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::SetPanel(this, core::mem::transmute_copy(&panel)).into()
            }
        }
        unsafe extern "system" fn Resize<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            width: u32,
            height: u32,
            scale: f32,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::Resize(this, width, height, scale).into()
            }
        }
        unsafe extern "system" fn RenderOnce<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::RenderOnce(this).into()
            }
        }
        unsafe extern "system" fn LoadHtml<Identity: IHost_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            html: *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IHost_Impl::LoadHtml(this, core::mem::transmute(&html)).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IHost, OFFSET>(),
            SetPanel: SetPanel::<Identity, OFFSET>,
            Resize: Resize::<Identity, OFFSET>,
            RenderOnce: RenderOnce::<Identity, OFFSET>,
            LoadHtml: LoadHtml::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHost as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHost_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetPanel: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
    pub Resize:
        unsafe extern "system" fn(*mut core::ffi::c_void, u32, u32, f32) -> windows_core::HRESULT,
    pub RenderOnce: unsafe extern "system" fn(*mut core::ffi::c_void) -> windows_core::HRESULT,
    pub LoadHtml: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IHostFactory,
    IHostFactory_Vtbl,
    0x203a7133_1999_5c5a_be38_1fc995de4b06
);
impl windows_core::RuntimeType for IHostFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IHostFactory {
    const NAME: &'static str = "Blitz.WinUI.IHostFactory";
}
pub trait IHostFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        panel: windows_core::Ref<'_, windows_core::IInspectable>,
        width: u32,
        height: u32,
        scale: f32,
    ) -> windows_core::Result<Host>;
}
impl IHostFactory_Vtbl {
    pub const fn new<Identity: IHostFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IHostFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            panel: *mut core::ffi::c_void,
            width: u32,
            height: u32,
            scale: f32,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IHostFactory_Impl::CreateInstance(
                    this,
                    core::mem::transmute_copy(&panel),
                    width,
                    height,
                    scale,
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IHostFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IHostFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IHostFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        *mut core::ffi::c_void,
        u32,
        u32,
        f32,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
