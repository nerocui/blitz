// Bindings generated by `windows-bindgen` 0.62.1

#![allow(
    non_snake_case,
    non_upper_case_globals,
    non_camel_case_types,
    dead_code,
    clippy::all
)]

#[repr(transparent)]
#[derive(Clone, Debug, Eq, PartialEq)]
pub struct BlitzView(windows_core::IUnknown);
windows_core::imp::interface_hierarchy!(
    BlitzView,
    windows_core::IUnknown,
    windows_core::IInspectable
);
impl BlitzView {
    pub fn SetTheme(&self, isdarkmode: bool) -> windows_core::Result<()> {
        let this = self;
        unsafe {
            (windows_core::Interface::vtable(this).SetTheme)(
                windows_core::Interface::as_raw(this),
                isdarkmode,
            )
            .ok()
        }
    }
    pub fn CreateInstance(
        swapchainpanel: u64,
        markdown: &windows_core::HSTRING,
    ) -> windows_core::Result<BlitzView> {
        Self::IBlitzViewFactory(|this| unsafe {
            let mut result__ = core::mem::zeroed();
            (windows_core::Interface::vtable(this).CreateInstance)(
                windows_core::Interface::as_raw(this),
                swapchainpanel,
                core::mem::transmute_copy(markdown),
                &mut result__,
            )
            .and_then(|| windows_core::Type::from_abi(result__))
        })
    }
    fn IBlitzViewFactory<R, F: FnOnce(&IBlitzViewFactory) -> windows_core::Result<R>>(
        callback: F,
    ) -> windows_core::Result<R> {
        static SHARED: windows_core::imp::FactoryCache<BlitzView, IBlitzViewFactory> =
            windows_core::imp::FactoryCache::new();
        SHARED.call(callback)
    }
}
impl windows_core::RuntimeType for BlitzView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_class::<Self, IBlitzView>();
}
unsafe impl windows_core::Interface for BlitzView {
    type Vtable = <IBlitzView as windows_core::Interface>::Vtable;
    const IID: windows_core::GUID = <IBlitzView as windows_core::Interface>::IID;
}
impl windows_core::RuntimeName for BlitzView {
    const NAME: &'static str = "BlitzWinRT.BlitzView";
}
unsafe impl Send for BlitzView {}
unsafe impl Sync for BlitzView {}
windows_core::imp::define_interface!(
    IBlitzView,
    IBlitzView_Vtbl,
    0x31ec616f_8698_5735_a00f_48fa02127e2e
);
impl windows_core::RuntimeType for IBlitzView {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBlitzView {
    const NAME: &'static str = "BlitzWinRT.IBlitzView";
}
pub trait IBlitzView_Impl: windows_core::IUnknownImpl {
    fn SetTheme(&self, isDarkMode: bool) -> windows_core::Result<()>;
}
impl IBlitzView_Vtbl {
    pub const fn new<Identity: IBlitzView_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn SetTheme<Identity: IBlitzView_Impl, const OFFSET: isize>(
            this: *mut core::ffi::c_void,
            isdarkmode: bool,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                IBlitzView_Impl::SetTheme(this, isdarkmode).into()
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBlitzView, OFFSET>(),
            SetTheme: SetTheme::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBlitzView as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlitzView_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub SetTheme: unsafe extern "system" fn(*mut core::ffi::c_void, bool) -> windows_core::HRESULT,
}
windows_core::imp::define_interface!(
    IBlitzViewFactory,
    IBlitzViewFactory_Vtbl,
    0x7f05406f_81f5_53c9_b5b8_9be6eebd22c3
);
impl windows_core::RuntimeType for IBlitzViewFactory {
    const SIGNATURE: windows_core::imp::ConstBuffer =
        windows_core::imp::ConstBuffer::for_interface::<Self>();
}
impl windows_core::RuntimeName for IBlitzViewFactory {
    const NAME: &'static str = "BlitzWinRT.IBlitzViewFactory";
}
pub trait IBlitzViewFactory_Impl: windows_core::IUnknownImpl {
    fn CreateInstance(
        &self,
        swapChainPanel: u64,
        markdown: &windows_core::HSTRING,
    ) -> windows_core::Result<BlitzView>;
}
impl IBlitzViewFactory_Vtbl {
    pub const fn new<Identity: IBlitzViewFactory_Impl, const OFFSET: isize>() -> Self {
        unsafe extern "system" fn CreateInstance<
            Identity: IBlitzViewFactory_Impl,
            const OFFSET: isize,
        >(
            this: *mut core::ffi::c_void,
            swapchainpanel: u64,
            markdown: *mut core::ffi::c_void,
            result__: *mut *mut core::ffi::c_void,
        ) -> windows_core::HRESULT {
            unsafe {
                let this: &Identity =
                    &*((this as *const *const ()).offset(OFFSET) as *const Identity);
                match IBlitzViewFactory_Impl::CreateInstance(
                    this,
                    swapchainpanel,
                    core::mem::transmute(&markdown),
                ) {
                    Ok(ok__) => {
                        result__.write(core::mem::transmute_copy(&ok__));
                        core::mem::forget(ok__);
                        windows_core::HRESULT(0)
                    }
                    Err(err) => err.into(),
                }
            }
        }
        Self {
            base__: windows_core::IInspectable_Vtbl::new::<Identity, IBlitzViewFactory, OFFSET>(),
            CreateInstance: CreateInstance::<Identity, OFFSET>,
        }
    }
    pub fn matches(iid: &windows_core::GUID) -> bool {
        iid == &<IBlitzViewFactory as windows_core::Interface>::IID
    }
}
#[repr(C)]
#[doc(hidden)]
pub struct IBlitzViewFactory_Vtbl {
    pub base__: windows_core::IInspectable_Vtbl,
    pub CreateInstance: unsafe extern "system" fn(
        *mut core::ffi::c_void,
        u64,
        *mut core::ffi::c_void,
        *mut *mut core::ffi::c_void,
    ) -> windows_core::HRESULT,
}
